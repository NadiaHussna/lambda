{
  "name": "back-office-be",
  "version": "1.0.0",
  "description": "OMNI is a unit trust digitization project which has several module covering end to end client onboarding and transaction process.",
  "main": "handle.js",
  "author": "",
  "license": "ISC",
  "homepage": "https://github.com/regovtech/omni-onboarding-be#readme",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/regovtech/omni-onboarding-backoffice-be.git"
  },
  "dependencies": {
    "amazon-cognito-identity-js": "5.1.0",
    "aws-sdk": "2.987.0",
    "binary-uuid": "2.0.3",
    "chrome-aws-lambda": "5.5.0",
    "dompurify": "2.3.1",
    "dotenv": "8.6.0",
    "handlebars": "4.7.7",
    "jsdom": "16.7.0",
    "jsonwebtoken": "8.5.1",
    "jszip": "3.7.1",
    "jwk-to-pem": "2.0.5",
    "moment-timezone": "0.5.33",
    "mysql": "2.18.1",
    "pdf-lib": "1.16.0",
    "puppeteer-core": "9.1.1",
    "redis": "3.1.2",
    "xlsx-populate": "1.21.0"
  },
  "devDependencies": {
    "@graphql-tools/merge": "6.2.13",
    "@types/dompurify": "2.2.3",
    "@types/jest": "26.0.24",
    "@types/jsdom": "16.2.13",
    "@types/jsonwebtoken": "8.5.5",
    "@types/jwk-to-pem": "2.0.1",
    "@types/jwt-decode": "2.2.1",
    "@types/mysql": "2.15.19",
    "@types/node": "14.17.15",
    "@types/redis": "2.8.28",
    "@types/uuid": "8.3.1",
    "@typescript-eslint/eslint-plugin": "3.10.1",
    "@typescript-eslint/parser": "3.10.1",
    "eslint": "7.32.0",
    "eslint-config-airbnb-base": "14.2.1",
    "eslint-config-prettier": "6.15.0",
    "eslint-plugin-import": "2.24.2",
    "eslint-plugin-prettier": "3.4.1",
    "husky": "4.3.8",
    "ioredis": "4.17.3",
    "jest": "26.6.3",
    "jsonschema": "1.2.7",
    "nodemon": "2.0.12",
    "prettier": "2.4.0",
    "puppeteer-lambda": "1.1.3",
    "rimraf": "3.0.2",
    "serverless-appsync-offline": "1.4.0",
    "serverless-appsync-plugin": "1.12.0",
    "ts-jest": "26.1.0",
    "ts-node": "8.10.2",
    "typeorm": "0.2.37",
    "typescript": "3.9.10"
  },
  "resolutions": {
    "@graphql-tools/merge": "[6.2.13] Required to fix compatibility with serverless-appsync-plugin",
    "jsonschema": "[1.2.7] Required to fix schema error"
  },
  "scriptComments": {
    "build:sls": "Build and start locally",
    "db:generate": "Generate migration script on model changes",
    "db:migrate": "Migrate models locally (note: set db in ormconfig.json)",
    "db:migrateDev": "Migrate models to DEV db",
    "db:revert": "Revert last migration",
    "cp:templates": "Creates templates folder in build and copies all templates into it",
    "easy:deploy": "Deploy to DEV lambda",
    "layer:zip": "Install dependencies without postinstall and creates zip for DEV layer creation",
    "lint": "Check for lint errors",
    "lint:fix": "Fix auto fixable lint issues",
    "postinstall": "Manually fix node modules (note: usually runs after npm install)",
    "service:start": "Shell script to start sls",
    "service:stop": "Shell script to stop sls",
    "sonar:run": "Runs sonar against repository",
    "sonar:start": "Starts sonarqube (note: if installed on local machine)",
    "test": "Run unit test without coverage",
    "test:coverage": "Run unit test with coverage",
    "test:one": "Run single unit test, require test name as input",
    "zip:build": "Zips build folder",
    "husky:script": "'husky': {'hooks': {'pre-commit': 'npm run lint:fix'}}"
  },
  "scripts": {
    "build": "rimraf ./build && tsc && npm run cp:templates",
    "event:mockExport": "npm run build && SLS_DEPRECATION_DISABLE=*  serverless invoke local -f BackOfficeWeb --path events/mockExport.json",
    "build:sls": "nodemon --exec npm run build & sls appsync-offline start",
    "cp:templates": "npm run mkdir:templates && npm run cp:email && npm run cp:report && npm run cp:pdf",
    "cp:email": "cp -r templates/email-templates build/templates",
    "cp:pdf": "cp -r templates/pdf-templates build/templates",
    "cp:report": "cp -r templates/report-templates build/templates",
    "db:generate": "ts-node ./node_modules/typeorm/cli.js migration:generate -n",
    "db:migrate": "ts-node ./node_modules/typeorm/cli.js migration:run",
    "db:migrateDev": "ts-node ./node_modules/typeorm/cli.js migration:run -c DEV",
    "db:revert": "ts-node ./node_modules/typeorm/cli.js migration:revert",
    "deploy:lambda": "aws lambda update-function-code --function-name dev-omni-backoffice-test --zip-file fileb://dev-omni-backoffice-test.zip",
    "easy:deploy": "npm run build && npm run zip:build && npm run deploy:lambda && rm dev-omni-backoffice-test.zip",
    "fix:lambdaRunner": "cp -f custom/@conduitvc-appsync-emulator-serverless-lambdaRunner.js node_modules/@conduitvc/appsync-emulator-serverless/lambdaRunner.js",
    "fix:reqLimit": "cp -f custom/raw-body-index.js node_modules/raw-body/index.js",
    "fix:schema": "cp -f custom/@conduitvc-appsync-emulator-serverless-schema.js node_modules/@conduitvc/appsync-emulator-serverless/schema.js",
    "fix:typeorm": "cp -f custom/typeorm-driver-mysql-MysqlQueryRunner.js node_modules/typeorm/driver/mysql/MysqlQueryRunner.js",
    "fix:vtl": "cp -f custom/@conduitvc-appsync-emulator-serverless-vtl.js node_modules/@conduitvc/appsync-emulator-serverless/vtl.js",
    "jest:unit": "jest tests/__tests__ --detectOpenHandles --forceExit --silent",
    "jest:setup": "npm run build && jest tests/setup.test.ts --detectOpenHandles --forceExit --silent",
    "layer:zip": "npm run make:layer && cd nodejs && npm install --production --ignore-scripts && cd ../ && zip -r backoffice-layer.zip nodejs; rm -r nodejs",
    "lint": "eslint . --ext .ts",
    "lint:fix": "npm run lint -- --fix",
    "make:layer": "mkdir nodejs && cp ./package.json nodejs/package.json && touch backoffice-layer.zip && rm backoffice-layer.zip",
    "mkdir:templates": "mkdir build/templates",
    "postinstall": "npm run fix:vtl && npm run fix:lambdaRunner && npm run fix:reqLimit && npm run fix:schema && npm run fix:typeorm",
    "service:start": "bash ./startServices.sh &",
    "service:stop": "bash ./stopServices.sh",
    "sonar:run": "sonar-scanner",
    "sonar:start": "docker run -p 9000:9000 sonarqube",
    "test": "npm run jest:setup && npm run jest:unit",
    "test:coverage": "npm run jest:setup && npm run jest:unit -- --coverage",
    "test:one": "npm run jest:setup && jest --detectOpenHandles --forceExit --silent -t",
    "zip:build": "cd build && zip -r ../dev-omni-backoffice-test.zip ."
  }
}
