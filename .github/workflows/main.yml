name: CICD

on:
  push:
    branches: 
      - DEV
      - SIT
      - UAT
      - staging
      - prod
      - release-try
      - NadiaHussna-patch-4
  
  pull_request: 
    branches:
      - SIT
      - UAT
      - staging
      - prod
      - release-try
      - NadiaHussna-patch-4

  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: AWS Test Configuration
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Create Zip File'
        id: 'create_package'
        run: |
          PACKAGE_NAME=build-$(date +"%Y-%m-%d-%H-%M-%S").zip
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          zip -r $PACKAGE_NAME .
          
      - name: check
        run: |
          echo ${{ steps.create_package.outputs.package_name }}
          
      - name: 'Create Artifacts'
        id: 'create_artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: latest-build
          path: ${{ github.workspace }}/${{ steps.create_package.outputs.package_name }}
      
      - name: 'Upload to S3 Bucket'
        run: aws s3 cp ${{ steps.create_package.outputs.package_name }} s3://${{ secrets.AWS_S3_BUCKET_NAME }}
      
  DeploytoDev:
    if: github.event.ref != 'refs/heads/DEV' && github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: DEV
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
  
  DeploytoSIT:
    if: github.event.ref == 'refs/heads/SIT'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: SIT
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
  
  DeploytoStaging:
    if: github.event.ref == 'refs/heads/staging'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
              
  DeploytoProd:
    if: github.event.ref == 'refs/heads/prod'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: Pre-production
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
    
  DeploytoUAT:
    if: github.event.ref == 'refs/heads/UAT'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: UAT
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
